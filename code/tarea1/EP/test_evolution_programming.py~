import ProgramacionEvolutiva as pe
import random
import numpy as np
import sys
import time

def sphere(x):
    return np.sum(np.power(x,2))

def ackley(x):
    first_sum = np.sum(x**2)
    second_sum = np.sum(np.cos(2*np.pi*x))
    n = float(len(x))
    return -20*np.exp(-0.2*np.sqrt(first_sum/n)) - np.exp(second_sum/n) + 20 + np.exp(1)

def rosenbrock(x):
    return np.sum(100.0*(x[1:]-x[:-1]**2.0)**2.0 + (1-x[:-1])**2.0)

_semilla_ = sys.argv[1]
dimension = 10
tam_poblacion = 21
max_iter = 100000
num_torneos = 4
mutation_rate = 0.01

########################ESFERA######################################
esfera_minimo = -5.12
esfera_maximo = 5.12

sphere = pe.EvolutionProgramming(dimension=dimension,tam_poblacion=tam_poblacion,max_iter=max_iter,minimo=esfera_minimo,maximo=esfera_maximo,funcion=sphere,semilla=_semilla_,num_torneos=num_torneos,mutation_rate=mutation_rate)

start_time = time.time()
poblacion = sphere.generate_population()
best_individual = sphere.evolucionar(poblacion)

print("#######ESFERA########")
print("Minimo Esfera - %s" % min(n for n in best_individual if n>0))
print("Tiempo - %s segundos" % (time.time()-start_time))
#print("%s" % min(n for n in best_individual if n>0))

########################ACKLEY######################################
ackley_minimo = -32.768
ackley_maximo = 32.768

ackley = pe.EvolutionProgramming(dimension=dimension,tam_poblacion=tam_poblacion,max_iter=max_iter,minimo=ackley_minimo,maximo=ackley_maximo,funcion=ackley,semilla=_semilla_,num_torneos=num_torneos,mutation_rate=mutation_rate)

start_time = time.time()
poblacion = ackley.generate_population()
best_individual = ackley.evolucionar(poblacion)

print("#######ACKLEY########")
print("Minimo ACKLEY - %s" % min(n for n in best_individual if n>0))
print("Tiempo - %s segundos" % (time.time()-start_time))

########################ROSENBROCK######################################
rosenbrock_minimo = -2.048
rosenbrock_maximo =  2.048

rosenbrock = pe.EvolutionProgramming(dimension=dimension,tam_poblacion=tam_poblacion,max_iter=max_iter,minimo=rosenbrock_minimo,maximo=rosenbrock_maximo,funcion=rosenbrock,semilla=_semilla_,num_torneos=num_torneos,mutation_rate=mutation_rate)

start_time = time.time()
poblacion = rosenbrock.generate_population()
best_individual = rosenbrock.evolucionar(poblacion)

print("#######ROSENBROCK########")
print("Minimo ROSENBROCK - %s" % min(n for n in best_individual if n>0))
print("Tiempo - %s segundos" % (time.time()-start_time))
